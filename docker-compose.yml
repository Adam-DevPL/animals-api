version: '3.8'

services:
  dev:
    container_name: animals_api_dev
    image: animals-api-dev:1.0.0
    build:
      context: .
      target: development
      dockerfile: ./Dockerfile
    command: npm run start:debug
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    environment:
      - MONGO_HOST=${MONGO_HOST}
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_USERNAME=${MONGO_USERNAME}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
    networks:
      - animals-api-network
    depends_on:
      - mongo-database
      - mongo-express
      - redis
      - redis-commander
    volumes:
      - .:/usr/src/app
    restart: unless-stopped

  prod:
    container_name: animals_api_prod
    image: animals-api-prod:1.00
    build:
      context: .
      target: production
      dockerfile: ./Dockerfile
    command: npm run start:prod
    environment:
      - MONGO_HOST=${MONGO_HOST}
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_USERNAME=${MONGO_USERNAME}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    networks:
      - animals-api-network
    depends_on:
      - mongo-database
      - redis
    volumes:
      - ./:/usr/src/app
    restart: unless-stopped

  mongo-database:
    container_name: animals-mongo-db
    image: mongo:latest
    restart: always
    ports:
      - 27018:${MONGO_PORT}
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    volumes:
      - mongo-data:/data/db
    networks:
      - animals-api-network

  mongo-express:
    container_name: animals-mongo-express
    image: mongo-express:latest
    ports:
      - ${MONGO_EXPRESS_PORT}:${MONGO_EXPRESS_PORT}
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_PASSWORD}
      - ME_CONFIG_MONGODB_SERVER=animals-mongo-db
    depends_on:
      - mongo-database
    networks:
      - animals-api-network
    restart: unless-stopped

  redis:
    image: redis:latest
    container_name: redis-cache
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    volumes:
      - redis:/data
    networks:
      - animals-api-network

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: ghcr.io/joeferner/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis-cache:6379
    ports:
      - "8085:8081"
    networks:
      - animals-api-network

networks:
  animals-api-network:
    driver: bridge

volumes:
  mongo-data:
  redis:
    driver: local
